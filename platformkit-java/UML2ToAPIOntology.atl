-- @atlcompiler atl2006
-- Transforms a UML2 model to an API OWL ontology containing all the packages
module UML2ToAPIOntology;

create OUT : OWL from IN : UML2;

uses UML2;

-- ======================================================================
-- helper attributes begin
-- ======================================================================

helper def : inElements : Set(UML2!ecore::EObject) = UML2!ecore::EObject->allInstancesFrom('IN');
helper def : includedPackages : Set(UML2!uml::Package) = UML2!uml::Package->allInstancesFrom('IN')
	->select(p|p->oclIsTypeOf(UML2!uml::Package) and p.packagedElement
		->select(p|not p->oclIsKindOf(UML2!uml::Package))->notEmpty());

-- ======================================================================
-- helper attributes end
-- ======================================================================

-- ======================================================================
-- helper methods begin
-- ======================================================================

helper context UML2!uml::NamedElement def : qualifiedName(separator : String) : String =
	if self.owner->oclIsTypeOf(UML2!uml::Package) then
		self.owner->qualifiedName(separator) + separator + self.name
	else
		self.name
	endif;

-- ======================================================================
-- helper methods end
-- ======================================================================

-- ======================================================================
-- transformation rules begin
-- ======================================================================

rule Model {
	from s : UML2!uml::Model (thisModule.inElements->includes(s))
	to n : OWL!Namespace mapsTo s (
		URI <- 'http://ssel.vub.ac.be/platformkit/java#',
		name <- s.name),
	   xsd : OWL!Namespace (
	   	URI <- 'http://www.w3.org/2001/XMLSchema#',
		name <- 'xsd'),
	   o : OWL!OWLOntology (
		localName <- s.name,
		namespace <- n,
		ownedNamespace <- Sequence{n, xsd},
		contains <- thisModule.includedPackages)
}

rule Package {
	from s : UML2!uml::Package (thisModule.includedPackages->includes(s))
	to t : OWL!OWLClass mapsTo s (
		localName <- s->qualifiedName('.')->debug('Package'),
		namespace <- s->getModel())
}

-- ======================================================================
-- transformation rules end
-- ======================================================================
