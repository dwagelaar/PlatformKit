-- @atlcompiler atl2006
-- Generates a build.xml file from a Transformations.ecore config file
-- $Id$
module ConfigToBuildFile; --extends ConfigToBuildFile from uml2cs-transformations

create OUT : XML from IN : CFG;

-- ======================================================================
-- helper attributes begin
-- ======================================================================

helper def : ModelPath : String = 'platform:/resource/platformkit-web/models';

-- ======================================================================
-- helper attributes end
-- ======================================================================

-- ======================================================================
-- transformation rules begin
-- ======================================================================

rule ConfigRoot {
	from s : CFG!"transformations::TransformationConfig"
	-- <project name="s.targetProject/build" default="all">
	to root : XML!"XML::Root" mapsTo s (
		name <- thisModule->ConfigHeader(s)),
	   default : XML!"XML::Attribute" (
	   	parent <- root,
	   	name <- 'default',
		value <- 'all'),
	-- <target name = 'all' depends = '...'>
	   allTarget : XML!"XML::Element" (
	   	name <- 'target',
		children <- thisModule->AllTarget(s),
		parent <- root),
	-- <target name = 'InstantMessengerModel' depends = 'allBase'>
	   imTarget : XML!"XML::Element" (
	   	name <- 'target',
		children <- thisModule->ModelTarget(
			'PlatformKitWeb',
			'inModel',
			'im',
			thisModule.ModelPath + '/PlatformKitWeb.uml',
			'platform:/resource/' + s.targetProject + '/src/PlatformKitWeb.hibernatemapping30'),
		parent <- root)
}

rule AllTarget(c : CFG!"instantmessenger::InstantMessengerConfiguration") {
	-- Sequence{name="all" depends="..."}
	to targetName : XML!"XML::Attribute"(
	   	name <- 'name',
		value <- 'all'),
	   targetDepends : XML!"XML::Attribute"(
	   	name <- 'depends',
		value <- Sequence{'PlatformKitWeb'}
	   		->append('prettyPrint')
			->iterate(e; acc : String = '' | acc +
				if acc = '' then e
				else ', ' + e endif)->debug('All')),
	-- 	<eclipse.refreshLocal resource="${ant.project.name}"/>
	   refresh : XML!"XML::Element" (
	   	name <- 'eclipse.refreshLocal'),
	   refreshResource : XML!"XML::Attribute" (
	   	name <- 'resource',
		value <- '${ant.project.name}',
		parent <- refresh)
	do {
		Sequence{targetName, targetDepends, refresh};
	}
}

rule ModelTarget(name : String, inModel : String, prefix : String, uri : String, hbmuri : String) {
	-- Sequence{name = 'name' depends = 'allBase'}
	to targetName : XML!"XML::Attribute"(
	   	name <- 'name',
		value <- name),
	   targetDepends : XML!"XML::Attribute"(
	   	name <- 'depends',
		value <- 'allBase'),
	-- <atl.loadModel modelHandler = 'EMF' name = 'inModel' metamodel = 'UML2' uri = 'uri'/>
	   loadModel : XML!"XML::Element" (
	   	name <- 'atl.loadModel'),
	   modelHandler : XML!"XML::Attribute" (
	   	name <- 'modelHandler',
		value <- 'EMF',
		parent <- loadModel),
	   modelName : XML!"XML::Attribute" (
	   	name <- 'name',
		value <- inModel,
		parent <- loadModel),
	   metamodel : XML!"XML::Attribute" (
	   	name <- 'metamodel',
		value <- 'UML2',
		parent <- loadModel),
	   modelUri : XML!"XML::Attribute" (
	   	name <- 'uri',
		value <- uri,
		parent <- loadModel),
	-- <antcall target="generateWithHBM" inheritRefs="true">
	   antcall : XML!"XML::Element" (
	   	name <- 'antcall'),
	   antcalltarget : XML!"XML::Attribute" (
	   	name <- 'target',
		value <- 'generateWithHBM',
		parent <- antcall),
	   inheritRefs : XML!"XML::Attribute" (
	   	name <- 'inheritRefs',
		value <- 'true',
		parent <- antcall),
	-- <param name="in" value="inModel"/>
	   paramin : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule->Property('in', inModel),
		parent <- antcall),
	-- <param name="prefix" value="prefix"/>
	   paramprefix : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule->Property('prefix', prefix),
		parent <- antcall),
	-- <param name="outHBM" value="prefix-HBM"/>
	   paramoutHBM : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule->Property('outHBM', prefix + '-HBM'),
		parent <- antcall),
	-- <param name="uriHBM" value="hbmuri"/>
	   parampathHBM : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule->Property('uriHBM', hbmuri),
		parent <- antcall)
	do {
		Sequence{targetName, targetDepends, loadModel, antcall};
	}
}

-- ======================================================================
-- transformation rules end
-- ======================================================================
