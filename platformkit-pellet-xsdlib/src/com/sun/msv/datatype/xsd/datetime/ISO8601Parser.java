/* Generated By:JavaCC: Do not edit this line. ISO8601Parser.java */
package com.sun.msv.datatype.xsd.datetime;

import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * parses various string that conforms to ISO-8601.
 */
public class ISO8601Parser implements ISO8601ParserConstants {
        public static void main(String args[]) throws Exception
        {
                String s = new BufferedReader( new InputStreamReader(System.in) ).readLine();
                new ISO8601Parser(new StringReader(s)).dateTypeL();
        }

        Number          yy,mm,dd;                       // Integer or BigInteger
        Number          HH,MM;                          // Integer or BigInteger
        Number          mSecond;                        // Integer or BigDecimal
        TimeZone        zone;                           // TimeZone

        private static final String[] trail = new String[]{"000","00","0",""};

        private void reset() { yy=mm=dd=HH=MM=mSecond=null; zone=null; }

  final public void secondL() throws ParseException {
    NN(0,59);
    if (jj_2_1(3)) {
      jj_consume_token(3);
      jj_consume_token(digits);
    } else {
      ;
    }
  }

  final public void secondV() throws ParseException {
                   int ss; Token t2=null;
    ss = NN(0,59);
    if (jj_2_2(3)) {
      jj_consume_token(3);
      t2 = jj_consume_token(digits);
    } else {
      ;
    }
                if(t2==null)
                {// no fraction part
                        mSecond = new Integer(ss*1000);
                        {if (true) return;}
                }

                if( t2.image.length()<4 )
                {// integer is enough
                        int v = Integer.parseInt(t2.image + trail[t2.image.length()]);
                        mSecond = new Integer(ss*1000+v );
                        {if (true) return;}
                }

                // we have to use BigDecimal
                mSecond = new BigDecimal( ss + "." + t2.image).movePointRight(3);
  }

  final public void durationTypeL() throws ParseException {
    if (jj_2_3(3)) {
      jj_consume_token(4);
    } else {
      ;
    }
    jj_consume_token(5);
    if (jj_2_5(3)) {
      datePartL();
      if (jj_2_4(3)) {
        jj_consume_token(6);
        timePartL();
      } else {
        ;
      }
    } else if (jj_2_6(3)) {
      jj_consume_token(6);
      timePartL();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
  }

  final public ITimeDurationValueType durationTypeV() throws ParseException {
                                           boolean neg=false;
    if (jj_2_7(3)) {
      jj_consume_token(4);
              neg=true;
    } else {
      ;
    }
    jj_consume_token(5);
    if (jj_2_9(3)) {
      datePartV(neg);
      if (jj_2_8(3)) {
        jj_consume_token(6);
        timePartV(neg);
      } else {
        ;
      }
    } else if (jj_2_10(3)) {
      jj_consume_token(6);
      timePartV(neg);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
                {if (true) return TimeDurationFactory.create(
                        yy, mm, dd, HH, MM, mSecond );}
    throw new Error("Missing return statement in function");
  }

  final public void datePartL() throws ParseException {
    if (jj_2_14(3)) {
      jj_consume_token(digits);
      jj_consume_token(7);
      if (jj_2_11(3)) {
        jj_consume_token(digits);
        jj_consume_token(8);
      } else {
        ;
      }
      if (jj_2_12(3)) {
        jj_consume_token(digits);
        jj_consume_token(9);
      } else {
        ;
      }
    } else if (jj_2_15(3)) {
      jj_consume_token(digits);
      jj_consume_token(8);
      if (jj_2_13(3)) {
        jj_consume_token(digits);
        jj_consume_token(9);
      } else {
        ;
      }
    } else if (jj_2_16(3)) {
      jj_consume_token(digits);
      jj_consume_token(9);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void datePartV(boolean neg) throws ParseException {
    if (jj_2_20(3)) {
      yy = intDigits(neg);
      jj_consume_token(7);
      if (jj_2_17(3)) {
        mm = intDigits(neg);
        jj_consume_token(8);
      } else {
        ;
      }
      if (jj_2_18(3)) {
        dd = intDigits(neg);
        jj_consume_token(9);
      } else {
        ;
      }
    } else if (jj_2_21(3)) {
      mm = intDigits(neg);
      jj_consume_token(8);
      if (jj_2_19(3)) {
        dd = intDigits(neg);
        jj_consume_token(9);
      } else {
        ;
      }
    } else if (jj_2_22(3)) {
      dd = intDigits(neg);
      jj_consume_token(9);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void timePartL() throws ParseException {
    if (jj_2_29(3)) {
      jj_consume_token(digits);
      jj_consume_token(10);
      if (jj_2_23(3)) {
        jj_consume_token(digits);
        jj_consume_token(8);
      } else {
        ;
      }
      if (jj_2_25(3)) {
        jj_consume_token(digits);
        if (jj_2_24(3)) {
          jj_consume_token(3);
          jj_consume_token(digits);
        } else {
          ;
        }
        jj_consume_token(11);
      } else {
        ;
      }
    } else if (jj_2_30(3)) {
      jj_consume_token(digits);
      jj_consume_token(8);
      if (jj_2_27(3)) {
        jj_consume_token(digits);
        if (jj_2_26(3)) {
          jj_consume_token(3);
          jj_consume_token(digits);
        } else {
          ;
        }
        jj_consume_token(11);
      } else {
        ;
      }
    } else if (jj_2_31(3)) {
      jj_consume_token(digits);
      if (jj_2_28(3)) {
        jj_consume_token(3);
        jj_consume_token(digits);
      } else {
        ;
      }
      jj_consume_token(11);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void timePartV(boolean neg) throws ParseException {
    if (jj_2_35(3)) {
      HH = intDigits(neg);
      jj_consume_token(10);
      if (jj_2_32(3)) {
        MM = intDigits(neg);
        jj_consume_token(8);
      } else {
        ;
      }
      if (jj_2_33(3)) {
        decimalDigits(neg);
        jj_consume_token(11);
      } else {
        ;
      }
    } else if (jj_2_36(3)) {
      MM = intDigits(neg);
      jj_consume_token(8);
      if (jj_2_34(3)) {
        decimalDigits(neg);
        jj_consume_token(11);
      } else {
        ;
      }
    } else if (jj_2_37(3)) {
      decimalDigits(neg);
      jj_consume_token(11);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Number intDigits(boolean neg) throws ParseException {
                                  Token v;
    v = jj_consume_token(digits);
                try
                {// try Integer first.
                        int i = Integer.parseInt(v.image);
                        if(neg) i=-i;
                        {if (true) return new Integer(i);}
                }
                catch( NumberFormatException e )
                {// then BigInteger
                        try
                        {
                                BigInteger bi = new BigInteger(v.image);
                                if(neg) bi = bi.negate();
                                {if (true) return bi;}
                        }
                        catch( NumberFormatException ee )
                        {
                                {if (true) throw new ParseException();}
                        }
                }
    throw new Error("Missing return statement in function");
  }

  final public void decimalDigits(boolean neg) throws ParseException {
                                    Token t1,t2=null;
    t1 = jj_consume_token(digits);
    if (jj_2_38(3)) {
      jj_consume_token(3);
      t2 = jj_consume_token(digits);
    } else {
      ;
    }
                String header = neg?"-":"";
                try
                {
                        if(t2==null)
                        {// no fraction part
                                mSecond = new Integer(header + t1.image+"000"); // multiply by 1000
                                {if (true) return;}
                        }
                        else
                        if( t2.image.length()<4 )
                        {// integer maybe enough
                                mSecond = new Integer(header + t1.image + t2.image + trail[t2.image.length()] );
                                {if (true) return;}
                        }
                }
                catch(NumberFormatException e) {;}

                // otherwise use BigDecimal
                mSecond = new BigDecimal( t1.image + "." + t2.image).movePointRight(3);
  }

/** digits that is
		1) width of two
		2) within [min,max] (inclusive)
*/
  final public int NN(int min, int max) throws ParseException {
                               Token v;
    v = jj_consume_token(digits);
                if(v.image.length()!=2)         {if (true) throw new ParseException();}
                int r = Integer.parseInt(v.image);
                if( r>max )             {if (true) throw new ParseException();}
                if( r<min )             {if (true) throw new ParseException();}
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

/*	Time Zone Modifier

	something like "-05:00" or "+09:00"
*/
  final public void timeZoneModifierL() throws ParseException {
                             int h,m=0;
    if (jj_2_41(3)) {
      jj_consume_token(12);
    } else if (jj_2_42(3)) {
      if (jj_2_39(3)) {
        jj_consume_token(13);
      } else if (jj_2_40(3)) {
        jj_consume_token(4);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      h = NN(0,14);
      jj_consume_token(14);
      m = NN(0,59);
                if(h==14 && m!=0)       {if (true) throw new ParseException();}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void timeZoneModifierV() throws ParseException {
        int h,m=0;int sign;
    if (jj_2_45(3)) {
      jj_consume_token(12);
                zone = TimeZone.ZERO;
    } else if (jj_2_46(3)) {
      if (jj_2_43(3)) {
        jj_consume_token(13);
               sign=1;
      } else if (jj_2_44(3)) {
        jj_consume_token(4);
                               sign=-1;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      h = NN(0,14);
      jj_consume_token(14);
      m = NN(0,59);
                if(h==14 && m!=0)       {if (true) throw new ParseException();}
                zone = TimeZone.create( sign*(h*60+m) );
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void timeL() throws ParseException {
    NN(0,24);
    jj_consume_token(14);
    NN(0,59);
    jj_consume_token(14);
    secondL();
  }

/* time without time zone modifier */
  final public void timeV() throws ParseException {
                 int h,m;
    h = NN(0,23);
    jj_consume_token(14);
    /* hour */
            m = NN(0,59);
    jj_consume_token(14);
    secondV();
                HH = new Integer(h);
                MM = new Integer(m);
  }

  final public int yearL() throws ParseException {
                Token v;
    if (jj_2_49(3)) {
      if (jj_2_47(3)) {
        jj_consume_token(13);
      } else if (jj_2_48(3)) {
        jj_consume_token(4);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    v = jj_consume_token(digits);
                final int length = v.image.length();
                if(length<4 || v.image.equals("0000") )
                        {if (true) throw new ParseException();}
                if(length>4 && v.image.charAt(0)=='0')
                        {if (true) throw new ParseException();}
                {if (true) return Integer.parseInt(v.image.substring(length-4));}
    throw new Error("Missing return statement in function");
  }

  final public void yearV() throws ParseException {
                 boolean neg=false; Token v;
    if (jj_2_52(3)) {
      if (jj_2_50(3)) {
        jj_consume_token(13);
      } else if (jj_2_51(3)) {
        jj_consume_token(4);
                 neg=true;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    v = jj_consume_token(digits);
         /* 0000 is prohibited. must be 4 digits or more */
                final int length = v.image.length();
                if(length<4)
                        // TODO : diagnosis message?
                        {if (true) throw new ParseException();}
                if(length>4 && v.image.charAt(0)=='0' )
                        // TODO : is this really a violation?
                        {if (true) throw new ParseException();}

                try
                {
                        int i = Integer.parseInt(v.image);
                        if(i==0)        // no year 0
                                {if (true) throw new ParseException();}
                        if(neg) i = -i+1;
                        yy = new Integer(i);
                }
                catch(NumberFormatException e)
                {// Integer maybe too small for this value try it with BigInteger
                        try
                        {
                                BigInteger bi = new BigInteger(v.image);
                                // TODO : could be optimized by using not()
                                if(neg)         bi = bi.negate().add(BigInteger.ONE);
                                yy = bi;
                        }
                        catch(NumberFormatException ee)
                        {
                                {if (true) throw new ParseException();}
                        }
                }
  }

/* month without time zone modifier */
  final public void month() throws ParseException {
                 int m;
    m = NN(1,12);
          mm = new Integer(m-1);
  }

/* day of month without time zone modifier */
  final public void day() throws ParseException {
               int d;
    d = NN(1,31);
          dd = new Integer(d-1);
  }

/* date without time zone modifier */
  final public void dateL() throws ParseException {
                 int tail4;
    tail4 = yearL();
    jj_consume_token(4);
    month();
    jj_consume_token(4);
    day();
                if( dd.intValue() >= Util.maximumDayInMonthFor( tail4, mm.intValue() ) )
                        {if (true) throw new ParseException();}     // something like 32nd,Jan 

  }

  final public void dateV() throws ParseException {
    yearV();
    jj_consume_token(4);
    month();
    jj_consume_token(4);
    day();
                if(
                        ( (yy instanceof BigInteger) &&
                                dd.intValue() >= Util.maximumDayInMonthFor( (BigInteger)yy, mm.intValue() ) )
                ||
                        ( (yy instanceof Integer) &&
                                dd.intValue() >= Util.maximumDayInMonthFor( yy.intValue(), mm.intValue() ) ) )
                        {if (true) throw new ParseException();}     // something like 32nd,Jan

  }

  final public void dateTimeTypeL() throws ParseException {
    dateL();
    jj_consume_token(6);
    timeL();
    if (jj_2_53(3)) {
      timeZoneModifierL();
    } else {
      ;
    }
    jj_consume_token(0);
  }

  final public IDateTimeValueType dateTimeTypeV() throws ParseException {
    dateV();
    jj_consume_token(6);
    timeV();
    if (jj_2_54(3)) {
      timeZoneModifierV();
    } else {
      ;
    }
    jj_consume_token(0);
          {if (true) return DateTimeFactory.createFromDateTime(
                yy, (Integer)mm, (Integer)dd, (Integer)HH, (Integer)MM, mSecond, zone );}
    throw new Error("Missing return statement in function");
  }

  final public void timeTypeL() throws ParseException {
    timeL();
    if (jj_2_55(3)) {
      timeZoneModifierL();
    } else {
      ;
    }
    jj_consume_token(0);
  }

  final public IDateTimeValueType timeTypeV() throws ParseException {
    timeV();
    if (jj_2_56(3)) {
      timeZoneModifierV();
    } else {
      ;
    }
    jj_consume_token(0);
          {if (true) return DateTimeFactory.createFromTime( (Integer)HH, (Integer)MM, mSecond, zone );}
    throw new Error("Missing return statement in function");
  }

  final public void dateTypeL() throws ParseException {
    dateL();
    if (jj_2_57(3)) {
      timeZoneModifierL();
    } else {
      ;
    }
    jj_consume_token(0);
  }

  final public IDateTimeValueType dateTypeV() throws ParseException {
    dateV();
    if (jj_2_58(3)) {
      timeZoneModifierV();
    } else {
      ;
    }
    jj_consume_token(0);
          {if (true) return DateTimeFactory.createFromDate(
                yy, (Integer)mm, (Integer)dd, zone );}
    throw new Error("Missing return statement in function");
  }

  final public void yearMonthTypeL() throws ParseException {
    yearL();
    jj_consume_token(4);
    month();
    if (jj_2_59(3)) {
      timeZoneModifierL();
    } else {
      ;
    }
    jj_consume_token(0);
  }

  final public IDateTimeValueType yearMonthTypeV() throws ParseException {
    yearV();
    jj_consume_token(4);
    month();
    if (jj_2_60(3)) {
      timeZoneModifierV();
    } else {
      ;
    }
    jj_consume_token(0);
          {if (true) return DateTimeFactory.createFromDate(
                yy, (Integer)mm, null, zone );}
    throw new Error("Missing return statement in function");
  }

  final public void yearTypeL() throws ParseException {
    yearL();
    if (jj_2_61(3)) {
      timeZoneModifierL();
    } else {
      ;
    }
    jj_consume_token(0);
  }

  final public IDateTimeValueType yearTypeV() throws ParseException {
    yearV();
    if (jj_2_62(3)) {
      timeZoneModifierV();
    } else {
      ;
    }
    jj_consume_token(0);
          {if (true) return DateTimeFactory.createFromDate( yy, null, null, zone );}
    throw new Error("Missing return statement in function");
  }

  final public void monthDayTypeL() throws ParseException {
    jj_consume_token(4);
    jj_consume_token(4);
    month();
    jj_consume_token(4);
    day();
    if (jj_2_63(3)) {
      timeZoneModifierL();
    } else {
      ;
    }
    jj_consume_token(0);
                if( dd.intValue() >= Util.maximumDayInMonthFor( 4, mm.intValue() ) )
                        {if (true) throw new ParseException();}     // something like 32nd,Jan

  }

  final public IDateTimeValueType monthDayTypeV() throws ParseException {
    jj_consume_token(4);
    jj_consume_token(4);
    month();
    jj_consume_token(4);
    day();
    if (jj_2_64(3)) {
      timeZoneModifierV();
    } else {
      ;
    }
    jj_consume_token(0);
                if( dd.intValue() >= Util.maximumDayInMonthFor( 4, mm.intValue() ) )
                        {if (true) throw new ParseException();}     // something like 32nd,Jan
                {if (true) return DateTimeFactory.createFromDate(
                        null, (Integer)mm, (Integer)dd, zone );}
    throw new Error("Missing return statement in function");
  }

  final public void dayTypeL() throws ParseException {
    jj_consume_token(4);
    jj_consume_token(4);
    jj_consume_token(4);
    day();
    if (jj_2_65(3)) {
      timeZoneModifierL();
    } else {
      ;
    }
    jj_consume_token(0);
  }

  final public IDateTimeValueType dayTypeV() throws ParseException {
    jj_consume_token(4);
    jj_consume_token(4);
    jj_consume_token(4);
    day();
    if (jj_2_66(3)) {
      timeZoneModifierV();
    } else {
      ;
    }
    jj_consume_token(0);
          {if (true) return DateTimeFactory.createFromDate(
                null, null, (Integer)dd, zone );}
    throw new Error("Missing return statement in function");
  }

  final public void monthTypeL() throws ParseException {
    jj_consume_token(4);
    jj_consume_token(4);
    month();
    jj_consume_token(4);
    jj_consume_token(4);
    if (jj_2_67(3)) {
      timeZoneModifierL();
    } else {
      ;
    }
    jj_consume_token(0);
  }

  final public IDateTimeValueType monthTypeV() throws ParseException {
    jj_consume_token(4);
    jj_consume_token(4);
    month();
    jj_consume_token(4);
    jj_consume_token(4);
    if (jj_2_68(3)) {
      timeZoneModifierV();
    } else {
      ;
    }
    jj_consume_token(0);
          {if (true) return DateTimeFactory.createFromDate( null, (Integer)mm, null, zone );}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(digits)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(3)) return true;
    if (jj_scan_token(digits)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(9)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(8)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(digits)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(3)) return true;
    if (jj_scan_token(digits)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(digits)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(digits)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(9)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(3)) return true;
    if (jj_scan_token(digits)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(digits)) return true;
    if (jj_scan_token(8)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(8)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(digits)) return true;
    if (jj_scan_token(9)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(8)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(10)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(digits)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(digits)) return true;
    if (jj_scan_token(8)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(digits)) return true;
    if (jj_scan_token(10)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(digits)) return true;
    if (jj_scan_token(9)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(digits)) return true;
    if (jj_scan_token(8)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(9)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(8)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(6)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(7)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(digits)) return true;
    if (jj_scan_token(9)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(digits)) return true;
    if (jj_scan_token(8)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(digits)) return true;
    if (jj_scan_token(7)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(6)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(6)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_4()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(4)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(6)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_2()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(4)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(4)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(4)) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(3)) return true;
    if (jj_scan_token(digits)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(3)) return true;
    if (jj_scan_token(digits)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(4)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    if (jj_3R_7()) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) return true;
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(4)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    if (jj_3R_7()) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(digits)) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(3)) return true;
    if (jj_scan_token(digits)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_8()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ISO8601ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;

  /** Constructor with InputStream. */
  public ISO8601Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ISO8601Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ISO8601ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public ISO8601Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ISO8601ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public ISO8601Parser(ISO8601ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(ISO8601ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
