-- @atlcompiler emftvm
-- Generates a build.xml file from a Transformations.ecore config file
-- $Id$
module "PlatformKitWeb::ConfigToBuildFile";

create OUT : XML from IN : CFG;

uses "Transformations::ConfigToBuildFile";

-- ======================================================================
-- helper attributes begin
-- ======================================================================

helper def : ModelPath : String = 'platform:/resource/platformkit-web/models';
helper def : ModelName : String = 'PlatformKitWeb';
helper def : ModelPrefix : String = 'pkw';

-- ======================================================================
-- helper attributes end
-- ======================================================================

-- ======================================================================
-- transformation rules begin
-- ======================================================================

rule ConfigRoot {
	from s : CFG!"transformations::TransformationConfig"
	-- <project name="s.targetProject/build" default="all">
	to root : XML!"XML::Root" (
		name <- thisModule.ConfigHeader(s)),
	   default : XML!"XML::Attribute" (
	   	parent <- root,
	   	name <- 'default',
		value <- 'all'),
	-- <target name = 'all' depends = '...'>
	   allTarget : XML!"XML::Element" (
	   	name <- 'target',
		children <- thisModule.AllTarget(s),
		parent <- root),
	-- <target name = 'all-feedback' depends = '...'>
	   allFeedbackTarget : XML!"XML::Element" (
	   	name <- 'target',
		children <- thisModule.AllFeedbackTarget(s),
		parent <- root),
	-- <target name = 'thisModule.ModelName' depends = 'allBase'>
	   imTarget : XML!"XML::Element" (
	   	name <- 'target',
		children <- thisModule.ModelTarget(
			thisModule.ModelName,
			'inModel',
			thisModule.ModelPrefix,
			thisModule.ModelPath + '/' + thisModule.ModelName + '.uml',
			'platform:/resource/' + s.targetProject + '/src/' + thisModule.ModelName + '.hibernatemapping30'),
		parent <- root),
	-- <target name = 'thisModule.ModelName-feedback' depends = 'allBase, loadJAVA'>
	   imTargetFeedback : XML!"XML::Element" (
	   	name <- 'target',
		children <- thisModule.ModelFeedbackTarget(
			thisModule.ModelName + '-feedback',
			'inModel',
			s.targetProject,
			thisModule.ModelPath + '/' + thisModule.ModelName + '.uml'),
		parent <- root)
}

lazy rule AllTarget {
	from c : CFG!"transformations::TransformationConfig"
	-- Sequence{name="all" depends="..."}
	to targetName : XML!"XML::Attribute"(
	   	name <- 'name',
		value <- 'all'),
	   targetDepends : XML!"XML::Attribute"(
	   	name <- 'depends',
		value <- Sequence{thisModule.ModelName}
	   		->append('prettyPrint')
			->iterate(e; acc : String = '' | acc +
				if acc = '' then e
				else ', ' + e endif)->debug('All'))
	do {
		Sequence{targetName, targetDepends};
	}
}

lazy rule AllFeedbackTarget {
	from c : CFG!"transformations::TransformationConfig"
	-- Sequence{name="all-feedback" depends="..."}
	to targetName : XML!"XML::Attribute"(
	   	name <- 'name',
		value <- 'all-feedback'),
	   targetDepends : XML!"XML::Attribute"(
	   	name <- 'depends',
		value <- Sequence{thisModule.ModelName + '-feedback'}
			->iterate(e; acc : String = '' | acc +
				if acc = '' then e
				else ', ' + e endif).debug('AllFeedback')),
	-- 	<eclipse.refreshLocal resource="thisModule.ModelPath"/>
	   refresh : XML!"XML::Element" (
	   	name <- 'eclipse.refreshLocal'),
	   refreshResource : XML!"XML::Attribute" (
	   	name <- 'resource',
		value <- thisModule.ModelPath,
		parent <- refresh)
	do {
		Sequence{targetName, targetDepends, refresh};
	}
}

rule ModelTarget(name : String, inModel : String, prefix : String, uri : String, hbmuri : String) {
	-- Sequence{name = 'name' depends = 'allBase'}
	to targetName : XML!"XML::Attribute"(
	   	name <- 'name',
		value <- name),
	   targetDepends : XML!"XML::Attribute"(
	   	name <- 'depends',
		value <- 'allBase'),
	-- <emftvm.loadModel name = 'inModel' uri = 'uri'/>
	   loadModel : XML!"XML::Element" (
	   	name <- 'emftvm.loadModel'),
	   modelName : XML!"XML::Attribute" (
	   	name <- 'name',
		value <- inModel,
		parent <- loadModel),
	   modelPath : XML!"XML::Attribute" (
	   	name <- 'uri',
		value <- uri,
		parent <- loadModel),
	-- <antcall target="generateWithHBM" inheritRefs="true">
	   antcall : XML!"XML::Element" (
	   	name <- 'antcall'),
	   antcalltarget : XML!"XML::Attribute" (
	   	name <- 'target',
		value <- 'generateWithHBM',
		parent <- antcall),
	   inheritRefs : XML!"XML::Attribute" (
	   	name <- 'inheritRefs',
		value <- 'true',
		parent <- antcall),
	-- <param name="in" value="inModel"/>
	   paramin : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule.Property('in', inModel),
		parent <- antcall),
	-- <param name="prefix" value="prefix"/>
	   paramprefix : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule.Property('prefix', prefix),
		parent <- antcall),
	-- <param name="outHBM" value="inModelHBM"/>
	   paramoutHBM : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule.Property('outHBM', inModel + 'HBM'),
		parent <- antcall),
	-- <param name="uriHBM" value="hbmuri"/>
	   paramuriHBM : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule.Property('uriHBM', hbmuri),
		parent <- antcall)
	do {
		Sequence{targetName, targetDepends, loadModel, antcall};
	}
}

rule ModelFeedbackTarget(name : String, inModel : String, targetProject : String, uri : String) {
	-- Sequence{name = 'name' depends = 'defineProperties, loadBaseModels, loadJAVA'}
	to targetName : XML!"XML::Attribute"(
	   	name <- 'name',
		value <- name),
	   targetDepends : XML!"XML::Attribute"(
	   	name <- 'depends',
		value <- 'defineProperties, loadBaseModels, loadJAVA'),
	-- <emftvm.loadModel name = 'inModel' uri = 'uri'/>
	   loadModel : XML!"XML::Element" (
	   	name <- 'emftvm.loadModel'),
	   modelName : XML!"XML::Attribute" (
	   	name <- 'name',
		value <- inModel,
		parent <- loadModel),
	   modelPath : XML!"XML::Attribute" (
	   	name <- 'uri',
		value <- uri,
		parent <- loadModel),
	-- <emftvm.loadModel name = 'inModelCode' path = 'targetProject/targetProject.javaxmi'/>
	   loadCode : XML!"XML::Element" (
	   	name <- 'emftvm.loadModel'),
	   cmodelName : XML!"XML::Attribute" (
	   	name <- 'name',
		value <- inModel + 'Code',
		parent <- loadCode),
	   cmodelPath : XML!"XML::Attribute" (
	   	name <- 'path',
		value <- '../' + targetProject + '.javaxmi',
		parent <- loadCode),
	-- <antcall target="java2uml" inheritRefs="true">
	   antcall : XML!"XML::Element" (
	   	name <- 'antcall'),
	   antcalltarget : XML!"XML::Attribute" (
	   	name <- 'target',
		value <- 'java2uml',
		parent <- antcall),
	   inheritRefs : XML!"XML::Attribute" (
	   	name <- 'inheritRefs',
		value <- 'true',
		parent <- antcall),
	-- <param name="in" value="inModel"/>
	   paramin : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule.Property('in', inModel),
		parent <- antcall),
	-- <param name="code" value="inModelCode"/>
	   paramcode : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule.Property('code', inModel + 'Code'),
		parent <- antcall),
	-- <param name="uri" value="uri"/>
	   parampath : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule.Property('uri', uri),
		parent <- antcall)
	do {
		Sequence{targetName, targetDepends, loadModel, loadCode, antcall};
	}
}

-- ======================================================================
-- transformation rules end
-- ======================================================================
