-- @atlcompiler atl2006
-- Generates a test hibernate mapping 3.0 model from a uml2 model
-- $Id$
module GenerateHibernateMapping;

create OUT : HBM from IN : UML2;

uses UML2;

-- ======================================================================
-- helpers begin
-- ======================================================================

helper def : persistents : Sequence(UML2!"Persistence::Persistent") = 
	UML2!"Persistence::Persistent".allInstances();

helper def : mappeds : Sequence(UML2!"Persistence::mapped") = 
	UML2!"Persistence::mapped".allInstances();

helper context UML2!"uml::Class" def : isPersistent() : Boolean =
	thisModule.persistents->select(o|o.base_Class=self)->notEmpty();

helper context UML2!"uml::Class" def : getPersistent() : UML2!"Persistence::Persistent" =
	thisModule.persistents->select(o|o.base_Class=self)->first();

helper context UML2!"uml::Property" def : isMapped() : Boolean =
	thisModule.mappeds->select(o|o.base_Property=self)->notEmpty();

helper context UML2!"uml::Property" def : getMapped() : UML2!"Persistence::mapped" =
	thisModule.mappeds->select(o|o.base_Property=self)->first();

helper context UML2!"uml::PrimitiveType" def : getGeneratorClass() : String =
	if self.name = 'Integer' or self.name = 'UnlimitedNatural' or self.name = 'Real'
	then 'native' else 'assigned' endif;

helper context UML2!"uml::Type" def : getGeneratorClass() : String =
	'assigned';

-- ======================================================================
-- helpers end
-- ======================================================================

-- ======================================================================
-- transformation rules begin
-- ======================================================================

rule HibernateMapping {
	from s : UML2!"uml::Model"
	to hm : HBM!HibernateMappingType mapsTo s (
		class <- UML2!Class.allInstances()->select(c|c.isPersistent())),
	   dr : HBM!DocumentRoot (
		hibernateMapping <- hm)
}

rule Class {
	from s : UML2!"uml::Class" (s.isPersistent())
	using { persistent : UML2!"Persistence::Persistent" = s.getPersistent(); }
	to c : HBM!ClassType mapsTo s (
		name <- s.qualifiedName('.').debug('PersistentClass'),
		table <- s.name,
		property <- s.attribute->select(a|a <> persistent.id),
		id <- id),
	   id : HBM!IdType (
	   	name <- persistent.id.name,
		column1 <- persistent.id.name + '_ID',
		generator <- gen),
	   gen : HBM!GeneratorType (
	   	class <- persistent.id.type.getGeneratorClass())
}

rule Property {
	from s : UML2!"uml::Property" (
		if s.class.oclIsUndefined() then false else
			if s.class.isPersistent() then
				s.class.getPersistent().id <> s and
				not s.isMapped()
			else false endif
		endif)
	to t : HBM!PropertyType mapsTo s (
		name <- s.name)
}

rule MappedProperty {
	from s : UML2!"uml::Property" (
		if s.class.oclIsUndefined() then false else
			if s.class.isPersistent() then
				s.class.getPersistent().id <> s and
				if s.isMapped() then
					s.getMapped().length <= 0
				else false endif
			else false endif
		endif)
	to t : HBM!PropertyType (
		name <- s.name,
		type1 <- s.getMapped().type)
}

rule MappedPropertyWithLength {
	from s : UML2!"uml::Property" (
		if s.class.oclIsUndefined() then false else
			if s.class.isPersistent() then
				s.class.getPersistent().id <> s and
				if s.isMapped() then
					s.getMapped().length > 0
				else false endif
			else false endif
		endif)
	to t : HBM!PropertyType (
		name <- s.name,
		type1 <- s.getMapped().type,
		length <- s.getMapped().length)
}

-- ======================================================================
-- transformation rules end
-- ======================================================================
