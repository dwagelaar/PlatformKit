<?xml version="1.0" encoding="UTF-8"?>
<project name="uml2cs-transformations-common">

	<!-- = = = = = taskdefs = = = = = -->
	
	<path id="anttasks.path">
		<fileset dir=".">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<taskdef name="javaformatter" 
		classname="org.hibernate.tool.ant.JavaFormatterTask"
		classpathref="anttasks.path"/>

	<!-- = = = = = properties = =  = = = -->

	<property name="trans.path" value="/uml2cs-transformations"/>
	<property name="trans.uml2copy.path" value="${trans.path}/UML2Copy.atl"/>
	<property name="trans.uml2profilecopy.path" value="${trans.path}/UML2ProfileCopy.asm"/>
	<property name="trans.uml2profiles.path" value="${trans.path}/UML2Profiles.asm"/>
	<property name="trans.uml2accessors.path" value="${trans.path}/UML2Accessors.asm"/>
	<property name="trans.uml2observer.path" value="${trans.path}/UML2Observer.asm"/>
	<property name="trans.uml2javaobserver.path" value="${trans.path}/UML2JavaObserver.asm"/>
	<property name="trans.uml2abstractfactory.path" value="${trans.path}/UML2AbstractFactory.asm"/>
	<property name="trans.uml2singleton.path" value="${trans.path}/UML2Singleton.asm"/>
	<property name="trans.uml2applet.path" value="${trans.path}/UML2Applet.asm"/>
	<property name="trans.uml2midlet.path" value="${trans.path}/UML2MIDlet.asm"/>
	<property name="trans.uml2asyncmethods.path" value="${trans.path}/UML2AsyncMethods.asm"/>
	<property name="trans.uml2datatypes.path" value="${trans.path}/UML2DataTypes.asm"/>
	<property name="trans.uml2tojava.path" value="${trans.path}/UML2ToJava.atl"/>
	<property name="trans.generatehbm.path" value="/platformkit-web/transformation/GenerateHibernateMapping.atl"/>

	<property name="metamodel.uml2.path" value="/platformkit-web/metamodels/UML2Profiles.ecore"/>
	<property name="metamodel.xml.path" value="/platformkit-web/metamodels/XML.ecore"/>
	<property name="profile.accessors.path" value="${trans.path}/profiles/Accessors.profile.uml"/>
	<property name="model.uml2types.path" value="${trans.path}/models/PrimitiveTypes.uml"/>
	<property name="model.javatypes.path" value="${trans.path}/models/JavaTypes.uml"/>
	<property name="model.obstypes.path" value="${trans.path}/models/Observer.uml"/>
	<property name="model.itenumadapter.path" value="${trans.path}/models/IteratorEnumerationAdapter.uml"/>
	<property name="model.midlet.path" value="${trans.path}/models/MIDlet.uml"/>

	<property name="lib.path" value="${trans.path}/lib"/>
	<property name="lib.javamappings.path" value="${lib.path}/JavaMappings.asm"/>
	<property name="lib.java1.path" value="${lib.path}/Java1.asm"/>
	<property name="lib.java2.path" value="${lib.path}/Java2.asm"/>
	<property name="lib.strings.path" value="${lib.path}/Strings.asm"/>
	<property name="lib.uml2.path" value="${lib.path}/UML2.asm"/>

	<property name="model.parameters.path" value="${current.path}/parameters.xml"/>

	<!-- = = = = = macros = =  = = = -->

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: profiles		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="profiles">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="path" default="MODEL.OUT.PATH" />
		<sequential>
			<am3.atl path="${trans.uml2copy.path}" allowInterModelReferences="true">
				<inmodel name="UML2" model="UML2"/>
				<inmodel name="IN" model="@{in}"/>
				<inmodel name="ACCESSORS" model="Accessors"/>
				<outmodel name="OUT" model="@{out}" metamodel="UML2" path="@{path}"/>
				<library name="UML2" path="${lib.uml2.path}"/>
				<superimpose path="${trans.uml2profiles.path}"/>
				<superimpose path="${trans.uml2profilecopy.path}"/>
			</am3.atl>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="path" value="@{path}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: accessors		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="accessors">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="path" default="MODEL.OUT.PATH" />
		<sequential>
			<am3.atl path="${trans.uml2copy.path}" allowInterModelReferences="true">
				<inmodel name="UML2" model="UML2"/>
				<inmodel name="ACCESSORS" model="Accessors"/>
				<inmodel name="UML2TYPES" model="PrimitiveTypes"/>
				<inmodel name="IN" model="@{in}"/>
				<outmodel name="OUT" model="@{out}" metamodel="UML2" path="@{path}"/>
				<library name="Strings" path="${lib.strings.path}"/>
				<library name="UML2" path="${lib.uml2.path}"/>
				<library name="Mappings" path="${lib.mappings.path}"/>
				<library name="Java" path="${lib.java.path}"/>
				<superimpose path="${trans.uml2accessors.path}"/>
				<superimpose path="${trans.uml2profilecopy.path}"/>
			</am3.atl>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="path" value="@{path}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: observer		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="observer">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="path" default="MODEL.OUT.PATH" />
		<sequential>
			<am3.atl path="${trans.uml2copy.path}" allowInterModelReferences="true">
				<inmodel name="UML2" model="UML2"/>
				<inmodel name="OBSERVER" model="Observer"/>
				<inmodel name="UML2TYPES" model="PrimitiveTypes"/>
				<inmodel name="IN" model="@{in}"/>
				<outmodel name="OUT" model="@{out}" metamodel="UML2" path="@{path}"/>
				<library name="Strings" path="${lib.strings.path}"/>
				<library name="UML2" path="${lib.uml2.path}"/>
				<library name="Mappings" path="${lib.mappings.path}"/>
				<library name="Java" path="${lib.java.path}"/>
				<superimpose path="${trans.uml2observer.path}"/>
				<superimpose path="${trans.uml2profilecopy.path}"/>
			</am3.atl>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="path" value="@{path}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: javaobserver		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="javaobserver">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="path" default="MODEL.OUT.PATH" />
		<sequential>
			<am3.atl path="${trans.uml2copy.path}" allowInterModelReferences="true">
				<inmodel name="UML2" model="UML2"/>
				<inmodel name="IMPLTYPES" model="ImplTypes"/>
				<inmodel name="UML2TYPES" model="PrimitiveTypes"/>
				<inmodel name="IN" model="@{in}"/>
				<outmodel name="OUT" model="@{out}" metamodel="UML2" path="@{path}"/>
				<library name="Strings" path="${lib.strings.path}"/>
				<library name="UML2" path="${lib.uml2.path}"/>
				<library name="Mappings" path="${lib.mappings.path}"/>
				<superimpose path="${trans.uml2javaobserver.path}"/>
				<superimpose path="${trans.uml2profilecopy.path}"/>
			</am3.atl>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="path" value="@{path}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: abstractfactory		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="abstractfactory">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="path" default="MODEL.OUT.PATH" />
		<sequential>
			<am3.atl path="${trans.uml2copy.path}" allowInterModelReferences="true">
				<inmodel name="UML2" model="UML2"/>
				<inmodel name="IN" model="@{in}"/>
				<outmodel name="OUT" model="@{out}" metamodel="UML2" path="@{path}"/>
				<library name="UML2" path="${lib.uml2.path}"/>
				<library name="Mappings" path="${lib.mappings.path}"/>
				<superimpose path="${trans.uml2abstractfactory.path}"/>
				<superimpose path="${trans.uml2profilecopy.path}"/>
			</am3.atl>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="path" value="@{path}"/>
			</antcall>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: singleton		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="singleton">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="path" default="MODEL.OUT.PATH" />
		<sequential>
			<am3.atl path="${trans.uml2copy.path}" allowInterModelReferences="true">
				<inmodel name="UML2" model="UML2"/>
				<inmodel name="IN" model="@{in}"/>
				<outmodel name="OUT" model="@{out}" metamodel="UML2" path="@{path}"/>
				<library name="UML2" path="${lib.uml2.path}"/>
				<library name="Java" path="${lib.java.path}"/>
				<library name="Mappings" path="${lib.mappings.path}"/>
				<superimpose path="${trans.uml2singleton.path}"/>
				<superimpose path="${trans.uml2profilecopy.path}"/>
			</am3.atl>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="path" value="@{path}"/>
			</antcall>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: applet		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="applet">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="path" default="MODEL.OUT.PATH" />
		<sequential>
			<am3.atl path="${trans.uml2copy.path}" allowInterModelReferences="true">
				<inmodel name="UML2" model="UML2"/>
				<inmodel name="IN" model="@{in}"/>
				<inmodel name="IMPLTYPES" model="ImplTypes"/>
				<outmodel name="OUT" model="@{out}" metamodel="UML2" path="@{path}"/>
				<library name="UML2" path="${lib.uml2.path}"/>
				<library name="Java" path="${lib.java.path}"/>
				<library name="Mappings" path="${lib.mappings.path}"/>
				<superimpose path="${trans.uml2applet.path}"/>
				<superimpose path="${trans.uml2profilecopy.path}"/>
			</am3.atl>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="path" value="@{path}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: midlet		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="midlet">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="path" default="MODEL.OUT.PATH" />
		<sequential>
			<am3.atl path="${trans.uml2copy.path}" allowInterModelReferences="true">
				<inmodel name="UML2" model="UML2"/>
				<inmodel name="IN" model="@{in}"/>
				<inmodel name="MIDLET" model="MIDlet"/>
				<outmodel name="OUT" model="@{out}" metamodel="UML2" path="@{path}"/>
				<library name="UML2" path="${lib.uml2.path}"/>
				<library name="Mappings" path="${lib.mappings.path}"/>
				<superimpose path="${trans.uml2midlet.path}"/>
				<superimpose path="${trans.uml2profilecopy.path}"/>
			</am3.atl>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="path" value="@{path}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: asyncmethods		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="asyncmethods">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="path" default="MODEL.OUT.PATH" />
		<sequential>
			<am3.atl path="${trans.uml2copy.path}" allowInterModelReferences="true">
				<inmodel name="UML2" model="UML2"/>
				<inmodel name="IN" model="@{in}"/>
				<outmodel name="OUT" model="@{out}" metamodel="UML2" path="@{path}"/>
				<library name="Mappings" path="${lib.mappings.path}"/>
				<superimpose path="${trans.uml2asyncmethods.path}"/>
				<superimpose path="${trans.uml2profilecopy.path}"/>
			</am3.atl>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="path" value="@{path}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: datatypes		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="datatypes">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="path" default="MODEL.OUT.PATH" />
		<sequential>
			<am3.atl path="${trans.uml2copy.path}" allowInterModelReferences="true">
				<inmodel name="UML2" model="UML2"/>
				<inmodel name="IMPLTYPES" model="ImplTypes"/>
				<inmodel name="IN" model="@{in}"/>
				<outmodel name="OUT" model="@{out}" metamodel="UML2" path="@{path}"/>
				<library name="Strings" path="${lib.strings.path}"/>
				<library name="UML2" path="${lib.uml2.path}"/>
				<library name="Mappings" path="${lib.mappings.path}"/>
				<library name="Java" path="${lib.java.path}"/>
				<superimpose path="${trans.uml2datatypes.path}"/>
				<superimpose path="${trans.uml2profilecopy.path}"/>
			</am3.atl>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="path" value="@{path}"/>
			</antcall>
			<antcall target="saveLastModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="path" value="@{path}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: generate		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="generate">
		<attribute name="in" default="MODEL.IN" />
		<sequential>
			<am3.atl path="${trans.generate.path}" allowInterModelReferences="true">
				<inmodel name="UML2" model="UML2"/>
				<inmodel name="IN" model="@{in}"/>
				<inmodel name="XML" model="XML"/>
				<inmodel name="parameters" model="Parameters"/>
				<library name="UML2" path="${lib.uml2.path}"/>
			</am3.atl>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: generateHBM
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name = 'generateHBM'>
		<attribute name = 'in' default = 'MODEL.IN'/>
		<attribute name = 'out' default = 'MODEL.OUT'/>
		<attribute name = 'path' default = 'MODEL.OUT.PATH'/>
		<sequential>
			<am3.atl path = '${trans.generatehbm.path}' allowInterModelReferences = 'true'>
				<inmodel name = 'HBM' model = 'HBM'/>
				<inmodel name = 'UML2' model = 'UML2'/>
				<inmodel name = 'IN' model = '@{in}'/>
				<outmodel name = 'OUT' model = '@{out}' metamodel = 'HBM' path = '@{path}'/>
				<library name = 'UML2' path = '${lib.uml2.path}'/>
			</am3.atl>
			<am3.saveModel model = '@{out}' path = '@{path}'/>
		</sequential>
	</macrodef>

	<!-- = = = = = targets = =  = = = -->

	<!-- = = = = = = = = = = = = = = = = =
		  target: defineProperties, defineJava1Properties, defineJava2Properties
		 = = = = = = = = = = = = = = = = = -->
	<target name = "defineProperties" depends="defineJava1Properties, defineJava2Properties"/>

	<target name = "defineJava1Properties" if="java1">
		<echo>Java1 selected</echo>
		<property name="lib.mappings.path" value="${lib.javamappings.path}"/>
		<property name="lib.java.path" value="${lib.java1.path}"/>
		<property name="model.impltypes.path" value="${model.javatypes.path}"/>
		<property name="trans.generate.path" value="${trans.uml2tojava.path}"/>
	</target>

	<target name = "defineJava2Properties" if="java2">
		<echo>Java2 selected</echo>
		<property name="lib.mappings.path" value="${lib.javamappings.path}"/>
		<property name="lib.java.path" value="${lib.java2.path}"/>
		<property name="model.impltypes.path" value="${model.javatypes.path}"/>
		<property name="trans.generate.path" value="${trans.uml2tojava.path}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: profiles
		 = = = = = = = = = = = = = = = = = -->
	<target name="profiles">
		<!-- params: ${in}, ${prefix} -->
		<profiles in = "${in}" out = "${prefix}-profiles" path = "${current.path}/${prefix}-profiles.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: accessors
		 = = = = = = = = = = = = = = = = = -->
	<target name="accessors" depends="profiles">
		<!-- params: ${in}, ${prefix} -->
		<accessors in = "${prefix}-profiles" out = "${prefix}-accessors" path = "${current.path}/${prefix}-accessors.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: observer, javaobserver
		 = = = = = = = = = = = = = = = = = -->
	<target name="observer" if="observer" depends="accessors">
		<!-- params: ${in}, ${prefix} -->
		<observer in = "${prefix}-accessors" out = "${prefix}-observer" path = "${current.path}/${prefix}-observer.uml"/>
	</target>

	<target name="javaobserver" if="javaobserver" depends="accessors">
		<!-- params: ${in}, ${prefix} -->
		<javaobserver in = "${prefix}-accessors" out = "${prefix}-observer" path = "${current.path}/${prefix}-observer.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: abstractfactory
		 = = = = = = = = = = = = = = = = = -->
	<target name="abstractfactory" depends="observer, javaobserver">
		<!-- params: ${in}, ${prefix} -->
		<abstractfactory in = "${prefix}-observer" out = "${prefix}-abstractfactory" path = "${current.path}/${prefix}-abstractfactory.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: singleton
		 = = = = = = = = = = = = = = = = = -->
	<target name="singleton" depends="abstractfactory">
		<!-- params: ${in}, ${prefix} -->
		<singleton in = "${prefix}-abstractfactory" out = "${prefix}-singleton" path = "${current.path}/${prefix}-singleton.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: applet, midlet
		 = = = = = = = = = = = = = = = = = -->
	<target name="applet" if="applet" depends="singleton">
		<!-- params: ${in}, ${prefix} -->
		<applet in = "${prefix}-singleton" out = "${prefix}-applet" path = "${current.path}/${prefix}-applet.uml"/>
	</target>

	<target name="midlet" if="midlet" depends="singleton">
		<!-- params: ${in}, ${prefix} -->
		<midlet in = "${prefix}-singleton" out = "${prefix}-applet" path = "${current.path}/${prefix}-applet.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: asyncmethods
		 = = = = = = = = = = = = = = = = = -->
	<target name="asyncmethods" depends="applet, midlet">
		<!-- params: ${in}, ${prefix} -->
		<asyncmethods in = "${prefix}-applet" out = "${prefix}-asyncmethods" path = "${current.path}/${prefix}-asyncmethods.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: datatypes
		 = = = = = = = = = = = = = = = = = -->
	<target name="datatypes" depends="asyncmethods">
		<!-- params: ${in}, ${prefix} -->
		<datatypes in = "${prefix}-asyncmethods" out = "${prefix}-datatypes" path = "${current.path}/${prefix}-datatypes.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: generate
		 = = = = = = = = = = = = = = = = = -->
	<target name="generate" depends="datatypes">
		<!-- params: ${in}, ${prefix} -->
		<generate in = "${prefix}-datatypes"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: generate
		 = = = = = = = = = = = = = = = = = -->
	<target name="generateWithHBM" depends="generate">
		<!-- params: ${in}, ${prefix}, ${outHBM}, ${pathHBM} -->
		<generateHBM in = "${prefix}-datatypes" out = "${outHBM}" path = "${pathHBM}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: loadBaseModels
		 = = = = = = = = = = = = = = = = = -->
	<target name = "loadBaseModels">
		<am3.loadModel modelHandler = "EMF" name = "XML" metamodel = "MOF" path = "${metamodel.xml.path}"/>
		<am3.loadModel modelHandler = "EMF" name = "Parameters" metamodel = "XML" path = "${current.path}/parameters.xml">
			<injector name = "xml"/>
		</am3.loadModel>
		<am3.loadModel modelHandler = "EMF" name = "UML2" metamodel = "MOF" path = "${metamodel.uml2.path}"/>
		<am3.loadModel modelHandler = "EMF" name = "Accessors" metamodel = "UML2" path = "${profile.accessors.path}"/>
		<am3.loadModel modelHandler = "EMF" name = "PrimitiveTypes" metamodel = "UML2" path = "${model.uml2types.path}"/>
		<am3.loadModel modelHandler = "EMF" name = "ImplTypes" metamodel = "UML2" path = "${model.impltypes.path}"/>
		<am3.loadModel modelHandler = "EMF" name = "HBM" metamodel = "MOF" nsuri = "http://hibernate.sourceforge.net/hibernate-mapping-3.0.xsd"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: loadIteratorEnumerationAdapter
		 = = = = = = = = = = = = = = = = = -->
	<target name = "loadIteratorEnumerationAdapter" if="java2" depends = "loadBaseModels">
		<am3.loadModel modelHandler = "EMF" name = "IteratorEnumerationAdapter" metamodel = "UML2" path = "${model.itenumadapter.path}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: loadObserver
		 = = = = = = = = = = = = = = = = = -->
	<target name = "loadObserver" if="observer" depends = "loadBaseModels">
		<am3.loadModel modelHandler = "EMF" name = "Observer" metamodel = "UML2" path = "${model.obstypes.path}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: loadMIDlet
		 = = = = = = = = = = = = = = = = = -->
	<target name = "loadMIDlet" if="midlet" depends = "loadBaseModels">
		<am3.loadModel modelHandler = "EMF" name = "MIDlet" metamodel = "UML2" path = "${model.midlet.path}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: saveModel
		 = = = = = = = = = = = = = = = = = -->
	<target name="saveModel" if="saveModels">
	<!-- params: ${model}, ${path} -->
   		<am3.saveModel model="${model}" path="${path}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: saveLastModel
		 = = = = = = = = = = = = = = = = = -->
	<target name="saveLastModel" if="saveLastModel">
	<!-- params: ${model}, ${path} -->
   		<am3.saveModel model="${model}" path="${path}"/>
	</target>
	
	<!-- = = = = = = = = = = = = = = = = =
		  target: IteratorEnumerationAdapter
		 = = = = = = = = = = = = = = = = = -->
	<target name = "IteratorEnumerationAdapter" if="java2" depends = "loadBaseModels, loadIteratorEnumerationAdapter, loadObserver, loadMIDlet">
		<antcall target = 'generate' inheritRefs = 'true'>
			<param name = 'in' value = 'IteratorEnumerationAdapter'/>
			<param name = 'prefix' value = 'enum'/>
		</antcall>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: Observer
		 = = = = = = = = = = = = = = = = = -->
	<target name = "Observer" if="observer" depends = "loadBaseModels, loadIteratorEnumerationAdapter, loadObserver, loadMIDlet">
		<antcall target = 'generate' inheritRefs = 'true'>
			<param name = 'in' value = 'Observer'/>
			<param name = 'prefix' value = 'observer'/>
		</antcall>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: MIDlet
		 = = = = = = = = = = = = = = = = = -->
	<target name = "MIDlet" if="midlet" depends = "loadBaseModels, loadIteratorEnumerationAdapter, loadObserver, loadMIDlet">
		<antcall target = 'generate' inheritRefs = 'true'>
			<param name = 'in' value = 'MIDlet'/>
			<param name = 'prefix' value = 'midlet'/>
		</antcall>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: allBase
		 = = = = = = = = = = = = = = = = = -->
	<target name = "allBase" depends = "defineProperties, loadBaseModels, loadIteratorEnumerationAdapter, loadObserver, loadMIDlet, IteratorEnumerationAdapter, Observer, MIDlet"/>

	<!-- = = = = = = = = = = = = = = = = =
		  target: clean
		 = = = = = = = = = = = = = = = = = -->
	<target name="clean">
        <delete>
            <fileset dir=".">
            	<include name="*.uml"/>
        	</fileset>
        </delete>
	    <eclipse.refreshLocal resource = '${ant.project.name}'/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: prettyPrint
		 = = = = = = = = = = = = = = = = = -->
	<target name="prettyPrint">
		<javaformatter>
			<fileset dir="../src">
				<include name="**/*.java"/>
			</fileset>
		</javaformatter>
	</target>

</project>
